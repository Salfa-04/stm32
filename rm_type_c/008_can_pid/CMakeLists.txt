cmake_minimum_required(VERSION 3.22 FATAL_ERROR)
##########################################
### File automatically-generated by tool
###
###     Modified by Salfa Chang
###       Date: [2024/07/28]
##########################################

# Set the project
set(CMAKE_PROJECT_NAME              000_cmake_test)
set(PRINTF_FLOAT_SUPPORT            FALSE)

set(CMAKE_C_STANDARD                11)      # 11..!!!
set(CMAKE_CXX_STANDARD              11)      # 11..!!!




######################################
## Toolchain information
######################################

# Set the target platform
set(CMAKE_SYSTEM_NAME               Generic)
set(CMAKE_SYSTEM_PROCESSOR          arm)

# Setup compiler settings
set(CMAKE_C_COMPILER_FORCED         TRUE)
set(CMAKE_C_COMPILER_ID             GNU)
set(CMAKE_C_STANDARD_REQUIRED       ON)
set(CMAKE_C_EXTENSIONS              ON)

set(CMAKE_CXX_COMPILER_FORCED       TRUE)
set(CMAKE_CXX_COMPILER_ID           GNU)
set(CMAKE_CXX_STANDARD_REQUIRED     ON)
set(CMAKE_CXX_EXTENSIONS            ON)

# Set the toolchain
set(TOOLCHAIN_PREFIX                arm-none-eabi-)
set(CMAKE_C_COMPILER                ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_ASM_COMPILER              ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_CXX_COMPILER              ${TOOLCHAIN_PREFIX}g++)
set(CMAKE_LINKER                    ${TOOLCHAIN_PREFIX}g++)
set(CMAKE_OBJCOPY                   ${TOOLCHAIN_PREFIX}objcopy)
set(CMAKE_SIZE                      ${TOOLCHAIN_PREFIX}size)

set(PROBE_DOWNLOADER                probe-rs)
set(PROBE_FLAGS                     download --chip STM32F407IGHx)
set(PROBE_FLAGS                     ${PROBE_FLAGS} --connect-under-reset)
set(PROBE_FLAGS                     ${PROBE_FLAGS} --protocol swd)



######################################
## Build flags
######################################

# Select the build type
if(CMAKE_BUILD_TYPE MATCHES Release)
    set(CMAKE_C_FLAGS               "-O3 -g0 -s")
else()
    set(CMAKE_C_FLAGS               "-Og -g3")
    set(CMAKE_BUILD_TYPE            "Debug")
endif()

if(${PRINTF_FLOAT_SUPPORT})
    set(CMAKE_C_LINK_FLAGS          "-u_printf_float")
else()
    set(PRINTF_FLOAT_SUPPORT        OFF)
endif()

message("Build type: "              ${CMAKE_BUILD_TYPE})
message("Float printf support: "    ${PRINTF_FLOAT_SUPPORT})

# Set the target type
set(CMAKE_EXECUTABLE_SUFFIX         ".elf")
set(CMAKE_EXPORT_COMPILE_COMMANDS   TRUE)
set(CMAKE_TRY_COMPILE_TARGET_TYPE   STATIC_LIBRARY)
set(CMAKE_GENERATOR Ninja CACHE INTERNAL "Name of generator.")

# Set the target flags
set(TARGET_FLAGS            "-mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard")
set(CMAKE_C_FLAGS           "${TARGET_FLAGS} ${CMAKE_C_FLAGS} -Wall -Wextra -Wpedantic")
set(CMAKE_C_FLAGS           "${CMAKE_C_FLAGS} -fdata-sections -ffunction-sections")
set(CMAKE_ASM_FLAGS         "${CMAKE_C_FLAGS} -x assembler-with-cpp -MMD -MP")
set(CMAKE_CXX_FLAGS         "${CMAKE_C_FLAGS} -fno-rtti -fno-exceptions -fno-threadsafe-statics")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} ${TARGET_FLAGS} --specs=nano.specs")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} -T \"${CMAKE_SOURCE_DIR}/STM32F407IGHx_FLASH.ld\"")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} -Wl,-Map=${CMAKE_PROJECT_NAME}.map -Wl,--gc-sections")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} -Wl,--start-group -lc -lm -Wl,--end-group")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} -Wl,--print-memory-usage")
set(CMAKE_CXX_LINK_FLAGS    "${CMAKE_C_LINK_FLAGS} -Wl,--start-group -lstdc++ -lsupc++ -Wl,--end-group")



######################################
## Building Libs
######################################

# Build HAL from STM32CubeMX
add_library(stm32cubemx INTERFACE)

file(GLOB DRIVER_HAL Drivers/STM32F4xx_HAL_Driver/Src/*.c)

target_compile_definitions(stm32cubemx INTERFACE
    USE_HAL_DRIVER STM32F407xx
)

target_include_directories(stm32cubemx INTERFACE
    # arm-none-eabi-newlib
    /usr/arm-none-eabi/include

    Drivers/STM32F4xx_HAL_Driver/Inc
    Drivers/STM32F4xx_HAL_Driver/Inc/Legacy
    Drivers/CMSIS/Device/ST/STM32F4xx/Include
    Drivers/CMSIS/Include
)

target_sources(stm32cubemx INTERFACE
    startup_stm32f407xx.s ${DRIVER_HAL}
)



######################################
## Building Core
######################################

# Core project settings
project(${CMAKE_PROJECT_NAME})
enable_language(C ASM) # CXX for C++

# Create an executable object type
add_executable(${CMAKE_PROJECT_NAME})

# Add download target
add_custom_target(download
    COMMENT "Download binary using ${PROBE_DOWNLOADER}"
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMAND ${PROBE_DOWNLOADER} ${PROBE_FLAGS} ${CMAKE_PROJECT_NAME}
    DEPENDS ${CMAKE_PROJECT_NAME} USES_TERMINAL
)

# Find source files using * glob
file(GLOB CORE_SRC Core/Src/*.c)
file(GLOB SOURCE_SRC Core/Source/*.c)

# Link directories setup
target_link_directories(${CMAKE_PROJECT_NAME} PRIVATE
)

# Add sources to executable
target_sources(${CMAKE_PROJECT_NAME} PRIVATE
    ${CORE_SRC} ${SOURCE_SRC}
)

# Add include paths
target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE
    Core/Inc
)

# Add project symbols (macros)
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE
)

# Add linked libraries
target_link_libraries(${CMAKE_PROJECT_NAME}
    stm32cubemx
)


# *** EOF ***
