cmake_minimum_required(VERSION 3.22 FATAL_ERROR)
##########################################
### File automatically-generated by tool
###
###     Modified by Salfa Chang
###       Date: [2024/08/10]
##########################################

# Set up the project
set(CMAKE_PROJECT_NAME)             # DirName for default
set(CMAKE_PROJECT_DESCRIPTION       "None")
set(CMAKE_PROJECT_VERSION           "0.07.23")
set(CMAKE_PROJECT_URL               "api.sal.cc")

set(PRINTF_FLOAT_SUPPORT            OFF)    # BOOL Y/N ON/OFF
set(CMAKE_BUILD_TYPE                Debug)  # Release or Debug

set(CMAKE_C_STANDARD                11)     # Min: 11..
set(CMAKE_CXX_STANDARD              11)     # Min: 11..

set(LOAD_SCRIPT                     "Libraries/STM32F407VETx_FLASH.ld")
set(SETUP_SCRIPT                    "Libraries/startup_stm32f407xx.s")






######################################
## Toolchain information
######################################

# Set the target platform
set(CMAKE_SYSTEM_NAME               Generic)
set(CMAKE_SYSTEM_PROCESSOR          arm)

# Setup compiler settings
set(CMAKE_C_COMPILER_FORCED         TRUE)
set(CMAKE_C_COMPILER_ID             GNU)
set(CMAKE_C_STANDARD_REQUIRED       ON)
set(CMAKE_C_EXTENSIONS              ON)

set(CMAKE_CXX_COMPILER_FORCED       TRUE)
set(CMAKE_CXX_COMPILER_ID           GNU)
set(CMAKE_CXX_STANDARD_REQUIRED     ON)
set(CMAKE_CXX_EXTENSIONS            ON)

# Set the toolchain
set(TOOLCHAIN_PREFIX                arm-none-eabi-)
set(CMAKE_C_COMPILER                ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_ASM_COMPILER              ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_CXX_COMPILER              ${TOOLCHAIN_PREFIX}g++)
set(CMAKE_LINKER                    ${TOOLCHAIN_PREFIX}g++)
set(CMAKE_OBJCOPY                   ${TOOLCHAIN_PREFIX}objcopy)
set(CMAKE_SIZE                      ${TOOLCHAIN_PREFIX}size)

set(PROBE_RS                        probe-rs)
set(PROBE_FLAGS                     STM32F401VETx --connect-under-reset)
set(PROBE_DL                        download --chip ${PROBE_FLAGS})
set(PROBE_DBG                       debug --chip ${PROBE_FLAGS})
set(PROBE_GDB                       gdb --chip ${PROBE_FLAGS})



######################################
## Build flags
######################################

if(NOT CMAKE_BUILD_TYPE STREQUAL Release)
set(CMAKE_BUILD_TYPE                "Debug")
endif()

if(${PRINTF_FLOAT_SUPPORT})
    set(CMAKE_C_LINK_FLAGS          "-u_printf_float")
else()
    set(PRINTF_FLOAT_SUPPORT        OFF)
endif()

if(NOT DEFINED CMAKE_PROJECT_NAME)
get_filename_component(CMAKE_PROJECT_NAME ${CMAKE_SOURCE_DIR} NAME)
endif()

# Display build information
message("Build Type: "              ${CMAKE_BUILD_TYPE})
message("Project Name: "            ${CMAKE_PROJECT_NAME})
message("Float Printf Support: "    ${PRINTF_FLOAT_SUPPORT})

# Set the build type
set(CMAKE_C_FLAGS_DEBUG             "-O0 -g3")
set(CMAKE_ASM_FLAGS_DEBUG           "-O0 -g3")
set(CMAKE_CXX_FLAGS_DEBUG           "-O0 -g3")
set(CMAKE_C_FLAGS_RELEASE           "-Ofast -s -DNODEBUG")
set(CMAKE_ASM_FLAGS_RELEASE         "-Ofast -s -DNODEBUG")
set(CMAKE_CXX_FLAGS_RELEASE         "-Ofast -s -DNODEBUG")

# Set the project information
unset(CMAKE_EXECUTABLE_SUFFIX)
set(CMAKE_EXPORT_COMPILE_COMMANDS   TRUE)
set(CMAKE_TRY_COMPILE_TARGET_TYPE   STATIC_LIBRARY)
set(CMAKE_GENERATOR Ninja CACHE INTERNAL "Name of generator.")

# Set the target flags
set(TARGET_FLAGS            "-mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard")
set(CMAKE_C_FLAGS           "${TARGET_FLAGS} -Wall -Wextra -Wpedantic")
set(CMAKE_C_FLAGS           "${CMAKE_C_FLAGS} -fdata-sections -ffunction-sections")
set(CMAKE_ASM_FLAGS         "${CMAKE_C_FLAGS} -x assembler-with-cpp -MMD -MP")
set(CMAKE_CXX_FLAGS         "${CMAKE_C_FLAGS} -fno-rtti -fno-exceptions -fno-threadsafe-statics")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} ${TARGET_FLAGS} --specs=nano.specs")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} -T \"${CMAKE_SOURCE_DIR}/${LOAD_SCRIPT}\"")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} -Wl,-Map=${CMAKE_PROJECT_NAME}.map -Wl,--gc-sections")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} -Wl,--start-group -lc -lm -Wl,--end-group")
set(CMAKE_C_LINK_FLAGS      "${CMAKE_C_LINK_FLAGS} -Wl,--print-memory-usage")
set(CMAKE_CXX_LINK_FLAGS    "${CMAKE_C_LINK_FLAGS} -Wl,--start-group -lstdc++ -lsupc++ -Wl,--end-group")



######################################
## User Customizations
######################################

# Add download target
add_custom_target(download USES_TERMINAL
    COMMENT "Download binary using ${PROBE_RS}"
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMAND ${PROBE_RS} ${PROBE_DL} ${CMAKE_PROJECT_NAME}
    DEPENDS ${CMAKE_PROJECT_NAME}
)

# Add debug(gdb) target
add_custom_target(gdb USES_TERMINAL
    COMMENT "Firing up GDB stub using ${PROBE_RS}"
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMAND ${PROBE_RS} ${PROBE_GDB}
    DEPENDS download
)

# Add debug(cmd) target
add_custom_target(debug USES_TERMINAL
    COMMENT "Start online debugging using ${PROBE_RS}"
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMAND ${PROBE_RS} ${PROBE_DBG}
)



######################################
## Building Libs
######################################

# Add sub-script
add_subdirectory(Components)
add_subdirectory(Drivers)


# Build CoreLibrary from User
add_library(corelibraries INTERFACE)

file(GLOB LIBS_SYSTEM Libraries/System/*.c)
file(GLOB LIBS_PERIPHERALS Libraries/Peripherals/*.c)

target_compile_definitions(corelibraries INTERFACE
)

target_include_directories(corelibraries INTERFACE
    Libraries/Peripherals/Include
)

target_sources(corelibraries INTERFACE
    ${LIBS_SYSTEM} ${LIBS_PERIPHERALS}
)



######################################
## Building Core
######################################

# Core project settings
project(${CMAKE_PROJECT_NAME}
    DESCRIPTION ${CMAKE_PROJECT_DESCRIPTION}
    VERSION ${CMAKE_PROJECT_VERSION}
    HOMEPAGE_URL ${CMAKE_PROJECT_URL}
)
enable_language(C ASM CXX)

# Create an executable object type
add_executable(${CMAKE_PROJECT_NAME})


# Find source files using * glob
file(GLOB APPS_START_C Apps/Start/*.c)
file(GLOB APPS_Blinky_C Apps/Blinky/*.c)

# Add sources to executable
target_sources(${CMAKE_PROJECT_NAME} PRIVATE
    ${SETUP_SCRIPT} ${APPS_START_C} ${APPS_Blinky_C}
)

# Add include paths
target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE
    # arm-none-eabi-newlib
    /usr/arm-none-eabi/include
    Apps/Start/Include Config

    Apps/Blinky
)


# Add project symbols (macros)
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE
)

# Add linked libraries
target_link_libraries(${CMAKE_PROJECT_NAME}
    stm32cubemx freertos corelibraries components
)


# *** EOF ***
